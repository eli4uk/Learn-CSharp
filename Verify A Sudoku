using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Text;
using System.Threading.Tasks;

namespace Verify_a_sudoku
{
    internal class Program
    {
        static void Main(string[] args)
        {
            //get input
            Console.WriteLine("Please enter your sudoku puzzle starting from the top left. After the first row, continue on the second row and so on. Make sure to sepetate each digit with a comma");
            string input = Console.ReadLine();
            string[] numbers = input.Split(' ');
            int[,] sudokuGrid = new int[9, 9];

            //transform input to 9x9 sudoku grid
            for (int i = 0; i < numbers.Length; i++)
            {
                int row = i / sudokuGrid.GetLength(0);
                int col = i % sudokuGrid.GetLength(1);
                sudokuGrid[row, col] = int.Parse(numbers[i]);
            }

            //Print out sudoku
            
            Console.Clear();
            Console.WriteLine("This is your entered Sudoku:");
            for (int i = 0; i < 9; i++)
            {
                for (int j = 0; j < 9; j++)
                {
                    Console.Write(sudokuGrid[i, j]+" ");
                }
                Console.WriteLine();
            }
            Console.WriteLine("==================");

            //checking validity of lines=============================================================================================================
            int[] sudokuDigitCount = new int[9] { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
            int[] oneLineKey = new int[9] {1, 1, 1, 1, 1, 1, 1, 1, 1};
            bool lineIsValid = true;

            for (int i = 0; i < sudokuGrid.GetLength(1); i++)
            {
                
                for (int j = 0; j < sudokuGrid.GetLength(0); j++)
                {
                    
                    sudokuDigitCount[sudokuGrid[i, j] - 1]++;
                }
                for (int k = 0; k < sudokuDigitCount.GetLength(0); k++)
                {
                    
                    if (sudokuDigitCount[k] != oneLineKey[k])
                    { 
                        lineIsValid = false;
                        break;
                    }
                    
                }
                for(int l = 0; l < sudokuDigitCount.GetLength(0); l++)
                {
                    sudokuDigitCount[l] = 0;
                }
            }
            int[] sudokuDigitCountV = new int[9] { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
            bool VlineIsValid = true;

            for (int j = 0; j < sudokuGrid.GetLength(1); j++)
            {

                for (int i = 0; i < sudokuGrid.GetLength(0); i++)
                {

                    sudokuDigitCount[sudokuGrid[i, j] - 1]++;
                }
                for (int k = 0; k < sudokuDigitCount.GetLength(0); k++)
                {

                    if (sudokuDigitCount[k] != oneLineKey[k])
                    {
                        lineIsValid = false;
                        break;
                    }

                }
                for (int l = 0; l < sudokuDigitCount.GetLength(0); l++)
                {
                    sudokuDigitCount[l] = 0;
                }
            }
            Console.WriteLine("line state: "+lineIsValid);

            //verify small squares===================================================================================================================

            //get small square array
            int[][] smallerArrays = new int[9][];

            for (int i = 0; i < sudokuGrid.GetLength(1); i++)
            {
                smallerArrays[i] = new int[9];
                for (int j = 0; j < sudokuGrid.GetLength(0); j++)
                {
                    smallerArrays[i][j] = sudokuGrid[i / 3 * 3 + j / 3, i % 3 * 3 + j % 3];
                }
            }

            //verifty small square
            bool smolSquareIsValid = true;
            for (int i = 0; i < sudokuGrid.GetLength(1); i++)
            {
                bool[] iForgorWhatThisWas = new bool[sudokuGrid.GetLength(0)];
                for (int j = 0; j < sudokuGrid.GetLength(0); j++)
                {
                    int temp = smallerArrays[i][j];
                    if (temp < 1 || temp > 9 || iForgorWhatThisWas[temp - 1])
                    {
                        smolSquareIsValid = false;
                        break;
                    }
                    iForgorWhatThisWas[temp - 1] = true;
                }
                if (!smolSquareIsValid)
                {
                    break;
                }
            }
            Console.WriteLine("the square state: " + smolSquareIsValid);
            
            if (smolSquareIsValid && lineIsValid && VlineIsValid) Console.WriteLine("Your sudoku is VALID");
            else Console.WriteLine("Your sudoku is INVALID");
            Console.ReadLine();
        }
    }
}
